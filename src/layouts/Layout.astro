---
import "@fontsource/abeezee";
import "@fontsource-variable/bitter";
import "@/styles/global.css";
import { buttonVariants } from "@/components/ui/button";
import { ModeToggle } from "@/components/ModeToggle";
---

<html lang="es">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Sunart BCN</title>
    <link rel="stylesheet" href="/src/styles/global.css" />
  </head>
  <body class="font-sans text-foreground bg-background">
    <header
      class="p-6 bg-background shadow-md flex justify-between items-center"
    >
      <a
        href="/"
        class={buttonVariants({
          variant: "link",
          className: "text-2xl! text-green-800",
        })}
      >
        SunartBcn
      </a>
      <nav>
        <a href="/tienda" class={buttonVariants({ variant: "link" })}>Tienda</a>
        <a href="/sobre-mi" class={buttonVariants({ variant: "link" })}
          >Sobre mÃ­</a
        >
        <a href="/contacto" class={buttonVariants({ variant: "link" })}
          >Contacto</a
        >
      </nav>
    </header>
    <main><slot /></main>
    <footer
      class="text-brand-950 bg-brand-150 text-center pb-4 pt-12 flex flex-rows items-center justify-between px-6"
    >
      <p>&copy; 2025 Sunart BCN Â· Hecho con ðŸ’– en Barcelona</p>
      <ModeToggle client:load />
    </footer>
  </body>
</html>

<script is:inline>
  const getThemePreference = () => {
    if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
      return localStorage.getItem("theme");
    }
    return window.matchMedia("(prefers-color-scheme: dark)").matches
      ? "dark"
      : "light";
  };
  const isDark = getThemePreference() === "dark";
  document.documentElement.classList[isDark ? "add" : "remove"]("dark");

  if (typeof localStorage !== "undefined") {
    const observer = new MutationObserver(() => {
      const isDark = document.documentElement.classList.contains("dark");
      localStorage.setItem("theme", isDark ? "dark" : "light");
    });
    observer.observe(document.documentElement, {
      attributes: true,
      attributeFilter: ["class"],
    });
  }
</script>
